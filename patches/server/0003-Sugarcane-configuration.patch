From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: tr7zw <tr7zw@live.de>
Date: Wed, 5 Aug 2020 08:05:10 -0500
Subject: [PATCH] Sugarcane configuration

also some basic settings that dont deserve a patch from Yatopia

diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index b58fc5c39d5cf3b88c61c0bfc55d2e98385bdaeb..2d094c88261412fb71f26fdebd5708eb50f6feb1 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -234,7 +234,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         com.tuinity.tuinity.config.TuinityConfig.init((java.io.File) options.valueOf("tuinity-settings")); // Tuinity - Server Config
         gg.airplane.AirplaneConfig.load(); // Airplane - config
         gg.airplane.commands.AirplaneCommands.init(); // Airplane - command
-
+        org.sugarcanemc.sugarcane.config.SugarcaneConfig.load(); // Sugarcane - config
+        org.sugarcanemc.sugarcane.command.SugarcaneCommandsManager.registerCommands(); // Sugarcane - command
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 75ea35574ad999fd7f6cce4b794017ebc9d0f218..6b78b1d6ac2ede431cbef107ee7e322296051cd2 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -267,7 +267,7 @@ public abstract class PlayerList {
         // Spigot - view distance
         playerconnection.send(new ClientboundLoginPacket(player.getId(), player.gameMode.getGameModeForPlayer(), player.gameMode.getPreviousGameModeForPlayer(), BiomeManager.obfuscateSeed(worldserver1.getSeed()), worlddata.isHardcore(), this.server.levelKeys(), this.registryHolder, worldserver1.dimensionType(), worldserver1.dimension(), this.getMaxPlayers(), worldserver1.getChunkSource().chunkMap.playerChunkManager.getLoadDistance(), flag1, !flag, worldserver1.isDebug(), worldserver1.isFlat())); // Paper - no-tick view distance // Tuinity - replace old player chunk management
         player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
+        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf((org.sugarcanemc.sugarcane.config.SugarcaneConfig.brandName)))); // Sugarcane)));
         playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index ee4fa43be982b686d5ba84989793def5c0d27dd2..1ebe7da8dfdd7771ec78da80eea51d3c287d50e0 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -398,22 +398,24 @@ public abstract class LivingEntity extends Entity {
         this.level.getProfiler().push("livingEntityBaseTick");
         boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
-        if (this.isAlive()) {
-            if (this.isInWall()) {
-                this.hurt(DamageSource.IN_WALL, 1.0F);
-            } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
-                double d0 = this.level.getWorldBorder().getDistanceToBorder((Entity) this) + this.level.getWorldBorder().getDamageSafeZone();
-
-                if (d0 < 0.0D) {
-                    double d1 = this.level.getWorldBorder().getDamagePerBlock();
-
-                    if (d1 > 0.0D) {
-                        if (level.purpurConfig.teleportIfOutsideBorder && this instanceof ServerPlayer) { ((ServerPlayer) this).teleport(MCUtil.toLocation(level, level.getSharedSpawnPos())); return; } // Purpur
-                        this.hurt(DamageSource.IN_WALL, (float) Math.max(1, Mth.floor(-d0 * d1)));
+        if (!org.sugarcanemc.sugarcane.config.SugarcaneConfig.disableEntityStuckChecks) { // Sugarcane
+            if (this.isAlive()) {
+                if (this.isInWall()) {
+                    this.hurt(DamageSource.IN_WALL, 1.0F);
+                } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
+                    double d0 = this.level.getWorldBorder().getDistanceToBorder((Entity) this) + this.level.getWorldBorder().getDamageSafeZone();
+
+                    if (d0 < 0.0D) {
+                        double d1 = this.level.getWorldBorder().getDamagePerBlock();
+
+                        if (d1 > 0.0D) {
+                            if (level.purpurConfig.teleportIfOutsideBorder && this instanceof ServerPlayer) { ((ServerPlayer) this).teleport(MCUtil.toLocation(level, level.getSharedSpawnPos())); return; } // Purpur
+                            this.hurt(DamageSource.IN_WALL, (float) Math.max(1, Mth.floor(-d0 * d1)));
+                        }
                     }
                 }
             }
-        }
+        } // Sugarcane
 
         if (this.fireImmune() || this.level.isClientSide) {
             this.clearFire();
diff --git a/src/main/java/org/sugarcanemc/sugarcane/command/SugarcaneCommandsManager.java b/src/main/java/org/sugarcanemc/sugarcane/command/SugarcaneCommandsManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..069ed5f6f457340add1822177d95c6f0e70aa029
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/command/SugarcaneCommandsManager.java
@@ -0,0 +1,19 @@
+package org.sugarcanemc.sugarcane.command;
+
+import java.util.Map;
+import java.util.HashMap;
+import org.bukkit.command.Command;
+import net.minecraft.server.MinecraftServer;
+
+public class SugarcaneCommandsManager {
+	private static Map<String, Command> commands;
+
+	static {
+		commands = new HashMap<>();
+		commands.put("nspt", new NSPTCommand("nspt"));
+	}
+
+	public static void registerCommands() {
+			MinecraftServer.getServer().server.getCommandMap().register("nspt", "Sugarcane", new NSPTCommand("nspt"));
+	}
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..43d1d720980450a00d3743ecbda3a79b680b4723
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
@@ -0,0 +1,119 @@
+package org.sugarcanemc.sugarcane.config;
+
+import com.google.common.base.Throwables;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import java.util.regex.Pattern;
+import org.bukkit.Bukkit;
+import co.technove.air.AIR;
+import net.minecraft.server.MinecraftServer;
+import org.apache.logging.log4j.Level;
+import org.bukkit.command.SimpleCommandMap;
+
+public class SugarcaneConfig {
+
+	private static AIR config;
+
+	public static void load() throws IOException {
+		File configFile = new File("sugarcane.air");
+		if (configFile.exists()) {
+			try (FileInputStream inputStream = new FileInputStream(configFile)) {
+				config = new AIR(inputStream);
+			}
+		} else {
+			config = new AIR();
+		}
+
+		config.setComment("info",
+		"This is the main configuration file for Sugarcane.",
+		"Sugarcane contains many breaking changes and settings, so know what you are doing!",
+		"You have been warned!",
+		"Join our Discord to receive support & optimization help: https://sugarcanemc.org/discord");
+	  config.getString("info.version", "1.0");
+
+		for (Method method : SugarcaneConfig.class.getDeclaredMethods()) {
+			if (Modifier.isStatic(method.getModifiers()) && Modifier.isPrivate(method.getModifiers())) {
+				method.setAccessible(true);
+				try {
+					method.invoke(null);
+				} catch (Throwable t) {
+					MinecraftServer.LOGGER.log(Level.WARN, "Failed to load configuration option from " + method.getName(), t);
+				}
+			}
+		}
+
+		try (FileOutputStream outputStream = new FileOutputStream(configFile)) {
+			config.save(outputStream);
+		}
+	}
+
+	private static final Pattern SPACE = Pattern.compile(" ");
+		private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+	public static int getSeconds(String str) {
+	str = SPACE.matcher(str).replaceAll("");
+		final char unit = str.charAt(str.length() - 1);
+		str = NOT_NUMERIC.matcher(str).replaceAll("");
+		double num;
+		try {
+			num = Double.parseDouble(str);
+		} catch (Exception e) {
+			num = 0D;
+		}
+		switch (unit) {
+			case 'd':
+				num *= (double) 60 * 60 * 24;
+				break;
+				case 'h':
+				num *= (double) 60 * 60;
+				break;
+				case 'm':
+				num *= 60;
+				break;
+				default:
+				case 's':
+					break;
+		}
+		return (int) num;
+}
+
+	protected static String timeSummary(int seconds) {
+	String time = "";
+
+		if (seconds > 60 * 60 * 24) {
+			time += TimeUnit.SECONDS.toDays(seconds) + "d";
+			seconds %= 60 * 60 * 24;
+		}
+
+		if (seconds > 60 * 60) {
+			time += TimeUnit.SECONDS.toHours(seconds) + "h";
+			seconds %= 60 * 60;
+		}
+
+		if (seconds > 0) {
+			time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+		}
+		return time;
+}
+
+	public static boolean disableEntityStuckChecks;
+	public static String brandName;
+
+	private static void settings() {
+		config.setComment("brand-name", "Here you can set what should your server display as it's brand name", "NOTE: This settings overrides the purpur's server-mod-name setting");
+
+		brandName = config.getString("brand-name.brand-name", "Sugarcane");
+
+		config.setComment("checks", "Here you can enable or disable some checks that are listed below");
+
+		disableEntityStuckChecks = config.getBoolean("checks.disable-entity-stuck-checks", false);
+
+	}
+}
\ No newline at end of file
